
(def('fib:get_num','fib:get_num:n','fib:get_num:i',(if(fib:get_num:i.equals(0),0,if(fib:get_num:i.equals(1),1,+(private(fib:get_num(fib:get_num:n,fib:get_num:i.-(1))),private(
fib:get_num(fib:get_num:n,fib:get_num:i.-(2)))))))),assert(comp(range(0,5),'i',fib:get_num(1, i)).equals([0,1,1,2,3])),proc('api',ENDPOINT("/",{"hello":4})),
equals(wait(request(@lh='http://localhost:5000/')),{"hello":4}).assert(),@v=list(range(0,10)),get(JS(function reverse(array){var output=[];for(var i=array.length-1;i>=0;i--){output.push(array[i]);}return output;
}console.log(JSON.stringify(reverse({=get(JAVA(import java.util.Arrays;public class ArrayRotation {public static void rotateArray(int[] array,int positions){int length=array.length;positions=
positions%length;int[] temp=new int[length];for(int i=0;i<length;i++){temp[(i+positions)%length]=array[i];}for(int i=0;i<length;i++){array[i]=temp[i];}}public static void main(String[] args)
{int[] numbers={=get(C(<tag>include "stdio.h"<nl>void printArray(int array[], int length){printf("{");for(int i=0;i<length;i++){printf("%d",array[i]);if(i<length-1){printf(", ");}}printf("}");}int main(){
int numbers[]={=(v.map('e',e.add(2)),@length=len(v),@v=v.str(),v.replace('[', '{'),v.replace(']', '}'))=};printArray(numbers,{=length=});}),'out')=};int rotations=2;rotateArray(numbers, rotations);
System.out.println(Arrays.toString(numbers));}},'ArrayRotation'),'out')=})));(async()=>console.log((await(await fetch('{=lh=}')).json())))()),'out').equals('[9,8,7,6,5,4,3,2,11,10]\n{ hello: 4 }').assert(),
macro('^','__^',-(__^).add(1)),assert((^1).equals(2),+(1,^1).-(3).equals(0),^0,(^0),equals(^^2,4)),postmacro('--','__--__',-(__--__).sub(1)),assert(not(1--),(^9----).equals(8),2--,not(3------)),
assert(equals(ls(big string, but with an {=+("insert","ion")=}),"big string, but with an insertion")))
